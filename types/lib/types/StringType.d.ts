import * as sql from '../sql/Expression';
declare class StringType extends sql.Field<string> implements String {
    constructor(data?: string);
    set(value: string | String): void;
    [Symbol.iterator](): IterableIterator<string>;
    codePointAt(pos: number): number;
    includes(searchString: string, position?: number): boolean;
    endsWith(searchString: string, endPosition?: number): boolean;
    normalize(form?: string): string;
    repeat(count: number): string;
    startsWith(searchString: string, position?: number): boolean;
    match(matcher: any): RegExpMatchArray;
    replace(searchValue: any, replaceValue: any): string;
    search(searcher: any): number;
    split(splitter: any, limit?: number): string[];
    anchor(name: string): string;
    big(): string;
    blink(): string;
    bold(): string;
    fixed(): string;
    fontcolor(color: string): string;
    fontsize(size: any): string;
    italics(): string;
    link(url: string): string;
    small(): string;
    strike(): string;
    sub(): string;
    sup(): string;
    toString(): string;
    charAt(pos: number): string;
    charCodeAt(index: number): number;
    concat(...strings: string[]): string;
    indexOf(searchString: string, position?: number): number;
    lastIndexOf(searchString: string, position?: number): number;
    localeCompare(that: string): number;
    slice(start?: number, end?: number): string;
    substring(start: number, end?: number): string;
    toLowerCase(): string;
    toLocaleLowerCase(): string;
    toUpperCase(): string;
    toLocaleUpperCase(): string;
    trim(): string;
    length: number;
    substr(from: number, length?: number): string;
    valueOf(): string;
    [index: number]: string;
    padStart(maxLength: number, fillString?: string): string;
    padEnd(maxLength: number, fillString?: string): string;
}
export default StringType;
